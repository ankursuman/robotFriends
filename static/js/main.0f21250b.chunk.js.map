{"version":3,"sources":["serviceWorker.js","card.js","cardlist.js","search.js","scroll.js","App.js","action.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","Cardlist","robo","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobot","onSearchChange","isPending","filterRobo","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobot","error","dispatch","event","payload","target","value","fetch","then","response","json","data","initialstateSearch","initialstateRobot","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCHSC,EAbF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrB,OAEI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACI,4BAAKC,GACL,2BAAIC,MCMLI,EAZE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAgBD,EAAKE,KAAI,SAACC,EAAMC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAKI,GAAGX,GAAIC,KAAMM,EAAKI,GAAGV,KAAMC,MAAOK,EAAKI,GAAGT,WAG5E,OACI,6BACKM,ICCEK,EATG,SAAC,GAAiC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKZ,UAAU,OACX,2BAAOA,UAAU,oCAAoCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCKtGI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCqBbC,E,kLAkBEC,KAAKP,MAAMQ,mB,+BAQL,IAAD,EACiDD,KAAKP,MAAnDN,EADH,EACGA,YAAae,EADhB,EACgBA,eAAetB,EAD/B,EAC+BA,KAAKuB,EADpC,EACoCA,UACnCC,EAAaxB,EAAKyB,QAAO,SAAAzB,GAC3B,OAAOA,EAAKN,KAAKgC,cAAcC,SAASpB,EAAYmB,kBAExD,OAAOH,EACH,yCAEI,yBAAK3B,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWY,aAAcc,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,KAAMwB,U,GAtCtBI,aA8CHC,eA/DS,SAAAC,GACpB,MAAO,CACHvB,YAAauB,EAAMC,aAAaxB,YAChCP,KAAM8B,EAAME,aAAahC,KACzBuB,UAAWO,EAAME,aAAaT,UAC9BU,MAAOH,EAAME,aAAaC,UAIP,SAACC,GACxB,MAAO,CACHZ,eAAgB,SAACa,GAAD,OAAWD,ECZM,CACrCzB,KCT+B,sBDU/B2B,QDUuDD,EAAME,OAAOC,SAChEjB,eAAgB,kBAAMa,GCRI,SAACA,GAC/BA,EAAS,CAACzB,KCZuB,0BDajC8B,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAACzB,KChBK,wBDgBwB2B,QAASO,OAC7DH,MAAK,SAAAP,GAAK,OAAIC,EAAS,CAACzB,KChBG,uBDgByB2B,QAASH,cDoDvDJ,CAA4CV,G,OGjErDyB,EAAqB,CACvBrC,YAAa,IAYXsC,EAAoB,CACtBtB,WAAW,EACXvB,KAAM,GACNiC,MAAO,ICTLa,EAASC,yBAETC,EAAcC,YAAgB,CAAClB,aDLT,WAA4C,IAA3CD,EAA0C,uDAAnCc,EAAoBM,EAAe,uDAAR,GAC3D,OAAOA,EAAOzC,MACV,IDb2B,sBCcvB,OAAO,2BAAIqB,GAAX,IAAkBvB,YAAa2C,EAAOd,UAC1C,QACI,OAAON,ICA+BE,aDWtB,WAAyC,IAAxCF,EAAuC,uDAAhCe,EAAkBK,EAAc,uDAAP,GACzD,OAAOA,EAAOzC,MACV,ID3B6B,wBC4BzB,OAAO0C,OAAOC,OAAO,GAAGtB,EAAM,CAACP,WAAW,IAC9C,ID5B6B,wBC6BzB,OAAO4B,OAAOC,OAAO,GAAGtB,EAAM,CAAC9B,KAAMkD,EAAOd,QAAQb,WAAW,IACnE,ID7B4B,uBC8BxB,OAAO4B,OAAOC,OAAO,GAAGtB,EAAM,CAACG,MAAOiB,EAAOd,QAAQb,WAAW,IACpE,QACI,OAAOO,MCnBbuB,EAAQC,YAAYN,EAAaO,YAAgBC,IAAgBV,IAGvEW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAASA,GACjB,kBAAC,EAAD,QAGJO,SAASC,eAAe,STyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.0f21250b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = ({id, name, email }) => {\r\n    return (\r\n\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './card'\r\n\r\nconst Cardlist = ({ robo }) => {\r\n    const cardComponent = robo.map((user, i) => {\r\n        return <Card key={i} id={robo[i].id} name={robo[i].name} email={robo[i].email}/>\r\n\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield , searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3  b2 b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange}/>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\nimport {connect } from 'react-redux'\r\nimport Cardlist from './cardlist'\r\nimport {robo} from './robo'\r\nimport SearchBox from './search'\r\nimport Scroll from './scroll'\r\n\r\nimport { setSearchField, requestRobot} from './action';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robo: state.requestRobot.robo,\r\n        isPending: state.requestRobot.isPending,\r\n        error: state.requestRobot.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobot: () => dispatch(requestRobot())\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n    // constructor(){\r\n    //     super()\r\n    //     this.state = {\r\n    //         robo: [],\r\n    //         //searchfield: ''\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        \r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        // .then(response => {\r\n        //     return response.json();\r\n        // })\r\n        // .then(user => {\r\n        //     this.setState({ robo: user})\r\n        // });\r\n        this.props.onRequestRobot();\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({searchfield: event.target.value})\r\n         \r\n    // }\r\n\r\n    render() {\r\n        const { searchfield, onSearchChange,robo,isPending} = this.props;\r\n        const filterRobo = robo.filter(robo => {\r\n            return robo.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        return isPending ? \r\n            <h1> Loading </h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <Cardlist robo={filterRobo}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_PENDING,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAILED\r\n} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobot = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOT_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data}))\r\n        .then(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_PENDING,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAILED\r\n} from './constants'\r\n\r\nconst initialstateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state= initialstateSearch, action={} ) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchfield: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialstateRobot = {\r\n    isPending: false,\r\n    robo: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobot = (state= initialstateRobot,action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOT_PENDING:\r\n            return Object.assign({},state,{isPending: true})\r\n        case REQUEST_ROBOT_SUCCESS:\r\n            return Object.assign({},state,{robo: action.payload,isPending: false})\r\n        case REQUEST_ROBOT_FAILED:\r\n            return Object.assign({},state,{error: action.payload,isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {  Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers} from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleWare from 'redux-thunk'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App'\nimport { searchRobots, requestRobot} from './reducer';\n\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobot})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare,logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}